name: Macro Deck Plugin Build

on:
  push:
    tags:
      - v*
  workflow_dispatch:
    inputs:
      tag: 
        description: "Tag for release"
        required: true
        type: string

jobs:
  build:    
    runs-on: windows-latest
    
    steps:     
      # Install the .NET Core workload
      - name: Install .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.x

      # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v1.0.2
        
      - uses: actions/checkout@v2
        with: 
          repository: SuchByte/Macro-Deck
          ref: refs/heads/main
          path: macro-deck
          
      # Restore the application to populate the obj folder with RuntimeIdentifiers
      - name: Restore the application
        run: msbuild /t:Restore /p:Configuration=Release
        working-directory: ./macro-deck
          
      - uses: actions/checkout@v2
        with: 
          path: plugin

      # Restore the application to populate the obj folder with RuntimeIdentifiers
      - name: Restore the application
        run: msbuild /t:Restore /p:Configuration=Release
        working-directory: ./plugin
              
      - name: Package into zip
        uses: papeloto/action-zip@v1
        with:
          files: plugin/obj/Release/netcoreapp3.1 plugin/Plugin.xml plugin/Icon.png plugin/README.md plugin/LICENSE
          dest: RecklessBoon.MacroDeck.GPUZ.zip
          
      - name: Github Release create, update, and upload assets
        # You may pin to the exact commit or the version.
        # uses: meeDamian/github-release@7ae19492500104f636b3fee4d8103af0fed36c8e
        uses: meeDamian/github-release@v2.0.3
        with:
          # Github API token to be used. Quite unavoidable, I'm afraid.
          token: ${{ secrets.GITHUB_TOKEN }}
          # A tag for the release. Required UNLESS action is run on tag push (meaning: '$GITHUB_REF' contains 'ref/tag/<TAG>').
          tag: ${{ github.event.inputs.tag }}
          # Name the release, the more creative, the better.
          name: ${{ github.event.inputs.tag }}
          # Longer description of the release, ex. changelog, or info about contributors.
          body: ${{ github.event.inputs.tag }}
          # Keep the Release as draft and don't publish it. With no 'files', the default is 'false'. With 'files' default is to 'un-draft' the release only after and if all assets upload successfully. Keep it private with explicit 'false'.
          draft: true
          # Marks Release as a pre-Release.
          prerelease: false
          # A whitespace-separated(!) list of files to be uploaded. It's impossible to pass a list here, so make sure filenames don't contain spaces nor colons in their names/paths.  Optionally custom asset name can be specified by pre-pending it to the name, ex: 'asset-name.tgz:./folder-to-be-uploaded/'.
          files: ./RecklessBoon.MacroDeck.GPUZ.zip
          # Default is 'true', which compresses both files, and folders. 'false' compresses nothing, but will error out on folders, as they can't be uploaded. 'folders' applies compression to folders only.
          gzip: false
          # Set to 'true' to allow for release overriding.
          allow_override: true
